_package xsd_loader

_block
	remex(:xsd_loader)
_endblock
$

def_slotted_exemplar(
	:xsd_loader,
	{
		{:types, _unset, :readable, :public},
		{:elements, _unset, :readable, :public}
	})
$

_pragma(classify_level=basic, topic={xsd_loader, xsd})
_method xsd_loader.new(p_types, p_elements)
	##
	_return _clone.init(p_types, p_elements)
_endmethod
$

_pragma(classify_level=basic, topic={xsd_loader, xsd})
_private _method xsd_loader.init(p_types, p_elements)
	##
	.types << p_types
	.elements << p_elements
	_return _self
_endmethod
$

_pragma(classify_level=basic, topic={xsd_loader, xsd})
_method xsd_loader.load_xml_from_file(p_filename)
	## Load and convert an XML file conforming to the loaded XSD
	## Creates in-memory objects from the XML, derived from the XSD
	l_simple_xml << simple_xml.new(:process_ns?, _true)
	l_xml << l_simple_xml.read_document_file(p_filename)
	
	# parse XML, transforming elements to objects
	_return _self.load_xml_thing(l_xml.top_element)
_endmethod
$

_pragma(classify_level=basic, topic={xsd_loader, xsd})
_method xsd_loader.load_xml_from_string(p_xml_string)
	## Load and convert an XML string conforming to the loaded XSD
	## Creates in-memory objects from the XML, derived from the XSD
	l_simple_xml << simple_xml.new(:process_ns?, _true)
	l_xml << l_simple_xml.read_document_string(p_filename)
	
	# parse XML, transforming elements to objects
	_return _self.load_xml_thing(l_xml.top_element)
_endmethod
$

_pragma(classify_level=basic, topic={xsd_loader, xsd})
_private _method xsd_loader.load_xml_thing(p_xml_thing, _optional p_exemplar)
	## Load an XML-element
	# get target type
	l_name << p_xml_thing.local_name.write_string
	l_exemplar << _if p_exemplar _isnt _unset
		      _then
			      >> p_exemplar
		      _elif .elements.includes_key?(l_name)
		      _then
			      >> .elements[l_name][:magik_exemplar]
		      _endif
	
	# parse children
	l_props << equality_property_list.new()
	_for i_xml_child _over p_xml_thing.xml_elements.fast_elements()
	_loop
		(l_child_name, l_child) << _self.parse_xml_child(i_xml_child, l_exemplar)
		
		_if l_props[l_child_name] _is _unset
		_then
			l_props[l_child_name] << rope.new()
		_endif
		l_props[l_child_name].add_last(l_child)
	_endloop
	
	# instantiate object
	_return l_exemplar.new(l_props)
_endmethod
$

_pragma(classify_level=basic, topic={xsd_loader, xsd})
_private _method xsd_loader.parse_xml_child(p_xml_child, p_parent_type)
	## Parse an XML-element
	l_child_name << p_xml_child.local_name.write_string
	l_element << p_parent_type.xsd_elements[l_child_name]
	l_exemplar << l_element[:magik_exemplar]
	l_child << _if l_exemplar _is _unset
		   _then
			   >> p_xml_child.xml_contents
		   _elif l_exemplar.is_kind_of?(xsd_simple_type)
		   _then
			   >> l_exemplar.new(p_xml_child.xml_contents)
		   _elif l_exemplar.is_kind_of?(xsd_complex_type)
		   _then
			   >> _self.load_xml_thing(p_xml_child, l_exemplar)
		   _endif
	
	_return l_child_name, l_child
_endmethod
$
